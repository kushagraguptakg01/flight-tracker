name: Flight Price Tracker & Report

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *' # Runs every 10 minutes
  push:
    branches:
      - main # Or your default branch

jobs:
  track-and-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      json_files_changed: ${{ steps.check_json_modifications.outputs.changed }}
      markdown_file_generated: ${{ steps.generate_readme_summary.outputs.generated_file_path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flight tracker script (updates JSONs)
        id: run_flight_py # This is where JSONs are potentially created/updated
        run: python flight.py

      - name: Check if README.md exists
        id: check_readme_exists
        run: |
          if [ -f "README.md" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "README.md does not exist. Will attempt to generate it."
          fi

      - name: Check for JSON modifications
        id: check_json_modifications
        run: |
          echo "Checking for modifications in flight_tracker_*.json files..."
          JSON_FILES_TO_CHECK=$(find . -maxdepth 1 -name 'flight_tracker_*.json' -print)
          if [ -n "$JSON_FILES_TO_CHECK" ]; then
            git add $JSON_FILES_TO_CHECK
            if git diff --staged --quiet --exit-code $JSON_FILES_TO_CHECK; then
              echo "No substantive changes to JSON flight data files."
              echo "changed=false" >> $GITHUB_OUTPUT
              git reset HEAD $JSON_FILES_TO_CHECK
            else
              echo "JSON flight data files were modified."
              echo "changed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "No flight_tracker_*.json files found to check for modifications."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate README.md Flight Summary
        id: generate_readme_summary
        if: steps.check_json_modifications.outputs.changed == 'true' || github.event_name == 'push' || steps.check_readme_exists.outputs.exists == 'false'
        env:
          MARKDOWN_FILENAME: "README.md"
        run: |
          echo "Attempting to generate $MARKDOWN_FILENAME summary..."
          JSON_FILES=$(find . -maxdepth 1 -name 'flight_tracker_*.json' -print)
          if [ -z "$JSON_FILES" ]; then
            echo "No flight_tracker_*.json files found. Skipping $MARKDOWN_FILENAME generation."
            echo "generated_file_path=" >> $GITHUB_OUTPUT
          else
            echo "Found JSON files: $JSON_FILES"
            echo "Generating $MARKDOWN_FILENAME using: $JSON_FILES"
            if python generate_markdown.py "$MARKDOWN_FILENAME" $JSON_FILES; then
              echo "$MARKDOWN_FILENAME generation successful."
              echo "generated_file_path=$MARKDOWN_FILENAME" >> $GITHUB_OUTPUT
            else
              echo "$MARKDOWN_FILENAME generation script failed."
              echo "generated_file_path=" >> $GITHUB_OUTPUT
            fi
          fi

      # --- Optional Plotting Steps (remain the same) ---
      - name: Generate plot images (optional artifact)
        if: steps.check_json_modifications.outputs.changed == 'true'
        run: |
          mkdir -p ./plots
          for json_file in $(find . -maxdepth 1 -name 'flight_tracker_*.json' -print); do
            if [ -f "$json_file" ]; then
              plot_filename="./plots/plot_$(basename "$json_file" .json).png"
              python visualize.py "$json_file" "$plot_filename"
            fi
          done
      - name: Upload plot artifacts (optional)
        if: steps.check_json_modifications.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: flight-price-plots
          path: ./plots/*.png
          if-no-files-found: warn
      # --- End Optional Plotting Steps ---

      - name: Commit and Push Updates (JSON and/or README.md)
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          MARKDOWN_FILE_PATH="${{ steps.generate_readme_summary.outputs.generated_file_path }}"
          if [ -n "$MARKDOWN_FILE_PATH" ] && [ -f "$MARKDOWN_FILE_PATH" ]; then
            echo "Adding $MARKDOWN_FILE_PATH to git."
            git add "$MARKDOWN_FILE_PATH"
          else
            echo "README.md path not set or file does not exist. Not adding to git."
          fi

          if ! git diff --staged --quiet; then
            commit_message="Update flight data and README.md summary - $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            json_changed_flag="${{ steps.check_json_modifications.outputs.changed }}"
            
            readme_content_changed=false
            if [ -n "$MARKDOWN_FILE_PATH" ] && [ -f "$MARKDOWN_FILE_PATH" ]; then
                if ! git diff --staged --quiet --exit-code "$MARKDOWN_FILE_PATH"; then
                    readme_content_changed=true
                fi
            fi

            if [[ "$json_changed_flag" == "false" && "$readme_content_changed" == "true" ]]; then
               commit_message="Regenerate README.md flight summary - $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            elif [[ "$json_changed_flag" == "false" && "$readme_content_changed" == "false" ]]; then
               # This case should ideally not happen due to the outer 'if ! git diff --staged --quiet'
               # but as a fallback if only unstaged JSONs were reset and MD was added but identical.
               echo "No actual content changes detected for commit after adding files."
               exit 0 # Exit successfully, no commit needed
            fi
            
            echo "Committing changes with message: $commit_message"
            git commit -m "$commit_message"
            git push
          else
            echo "No substantive changes to JSON data or README.md to commit."
          fi